// package.json
{
  "name": "slack-knowledge-extractor",
  "version": "1.0.0",
  "description": "MVP for extracting organizational knowledge from Slack",
  "main": "src/server.ts",
  "scripts": {
    "dev": "tsx watch src/server.ts",
    "build": "tsc",
    "start": "node dist/server.js"
  },
  "dependencies": {
    "@slack/web-api": "^7.0.0",
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "node-fetch": "^3.3.2"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/cors": "^2.8.17",
    "@types/node": "^20.10.0",
    "typescript": "^5.3.0",
    "tsx": "^4.6.0"
  }
}

// .env.example
SLACK_BOT_TOKEN=xoxb-your-bot-token-here
SLACK_SIGNING_SECRET=your-signing-secret-here
PORT=3000
CLAUDE_API_KEY=your-claude-api-key-here

// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}

// src/types.ts
export interface ExtractedMessage {
  id: string;
  text: string;
  user: string;
  username?: string;
  channel: string;
  channelName?: string;
  timestamp: string;
  thread_ts?: string;
  reactions?: string[];
  permalink?: string;
}

export interface ProcessedKnowledge {
  id: string;
  originalMessage: ExtractedMessage;
  category: 'decisions' | 'discussions' | 'resources' | 'processes' | 'announcements';
  summary: string;
  keyPoints: string[];
  actionItems: string[];
  relevantContext: string;
  confidence: number;
  extractedAt: string;
}

export interface KnowledgeStats {
  totalMessages: number;
  totalKnowledgeItems: number;
  categoryCounts: Record<string, number>;
  topContributors: Array<{ user: string; count: number }>;
  channelStats: Record<string, number>;
}

// src/slack-client.ts
import { WebClient } from '@slack/web-api';
import { ExtractedMessage } from './types';

export class SlackExtractor {
  private client: WebClient;
  private rateLimitDelay = 1000; // 1 second between requests

  constructor(token: string) {
    this.client = new WebClient(token);
  }

  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async getChannels(): Promise<Array<{ id: string; name: string; memberCount?: number }>> {
    try {
      const result = await this.client.conversations.list({
        types: 'public_channel,private_channel',
        exclude_archived: true,
        limit: 100
      });

      return (result.channels || []).map(channel => ({
        id: channel.id!,
        name: channel.name!,
        memberCount: channel.num_members
      }));
    } catch (error) {
      console.error('Error fetching channels:', error);
      return [];
    }
  }

  async getUsers(): Promise<Map<string, string>> {
    const userMap = new Map<string, string>();
    
    try {
      const result = await this.client.users.list();
      
      (result.members || []).forEach(user => {
        if (user.id && user.real_name) {
          userMap.set(user.id, user.real_name);
        }
      });
    } catch (error) {
      console.error('Error fetching users:', error);
    }

    return userMap;
  }

  async extractMessages(
    channelId: string, 
    channelName: string,
    daysBack: number = 30,
    userMap: Map<string, string>
  ): Promise<ExtractedMessage[]> {
    const messages: ExtractedMessage[] = [];
    const oldest = Math.floor((Date.now() - (daysBack * 24 * 60 * 60 * 1000)) / 1000);

    try {
      let cursor: string | undefined;
      let hasMore = true;

      while (hasMore) {
        await this.delay(this.rateLimitDelay);

        const result = await this.client.conversations.history({
          channel: channelId,
          oldest: oldest.toString(),
          limit: 100,
          cursor
        });

        if (result.messages) {
          for (const message of result.messages) {
            // Skip bot messages and system messages
            if (message.bot_id || message.subtype || !message.text || !message.user) {
              continue;
            }

            // Skip very short messages (likely not knowledge-rich)
            if (message.text.length < 20) {
              continue;
            }

            const extractedMessage: ExtractedMessage = {
              id: message.ts!,
              text: message.text,
              user: message.user,
              username: userMap.get(message.user) || message.user,
              channel: channelId,
              channelName,
              timestamp: new Date(parseFloat(message.ts!) * 1000).toISOString(),
              thread_ts: message.thread_ts,
              reactions: message.reactions?.map(r => r.name!).filter(Boolean)
            };

            messages.push(extractedMessage);
          }
        }

        hasMore = result.has_more || false;
        cursor = result.response_metadata?.next_cursor;

        if (!hasMore) break;
      }

      console.log(`Extracted ${messages.length} messages from #${channelName}`);
      return messages;

    } catch (error) {
      console.error(`Error extracting messages from ${channelName}:`, error);
      return [];
    }
  }
}

// src/knowledge-processor.ts
import { ExtractedMessage, ProcessedKnowledge } from './types';

export class KnowledgeProcessor {
  private claudeApiKey: string;

  constructor(claudeApiKey: string) {
    this.claudeApiKey = claudeApiKey;
  }

  async processMessage(message: ExtractedMessage): Promise<ProcessedKnowledge | null> {
    try {
      const prompt = `Analyze this Slack message for organizational knowledge. Extract key information and categorize it.

Message: "${message.text}"
Channel: #${message.channelName}
Author: ${message.username}
Date: ${message.timestamp}

Please analyze and respond with a JSON object containing:
- category: one of "decisions", "discussions", "resources", "processes", "announcements"
- summary: brief summary of the main point
- keyPoints: array of 2-4 key points
- actionItems: array of any action items mentioned
- relevantContext: why this might be important organizationally
- confidence: number 0-1 indicating how confident you are this contains valuable knowledge

Only respond with the JSON object, no other text.`;

      // In a real implementation, you'd call Claude API here
      // For MVP, we'll use simple rule-based processing
      return this.simpleProcessing(message);

    } catch (error) {
      console.error('Error processing message:', error);
      return null;
    }
  }

  private simpleProcessing(message: ExtractedMessage): ProcessedKnowledge {
    const text = message.text.toLowerCase();
    let category: ProcessedKnowledge['category'] = 'discussions';
    let confidence = 0.5;

    // Simple rule-based categorization
    if (text.includes('decided') || text.includes('decision') || text.includes('approved')) {
      category = 'decisions';
      confidence = 0.8;
    } else if (text.includes('http') || text.includes('document') || text.includes('link')) {
      category = 'resources';
      confidence = 0.7;
    } else if (text.includes('process') || text.includes('how to') || text.includes('steps')) {
      category = 'processes';
      confidence = 0.7;
    } else if (text.includes('announce') || text.includes('important') || text.includes('everyone')) {
      category = 'announcements';
      confidence = 0.8;
    }

    // Extract potential action items
    const actionItems: string[] = [];
    const actionWords = ['todo', 'action item', 'need to', 'should', 'must', 'will do'];
    const sentences = message.text.split(/[.!?]/);
    
    sentences.forEach(sentence => {
      if (actionWords.some(word => sentence.toLowerCase().includes(word))) {
        actionItems.push(sentence.trim());
      }
    });

    return {
      id: `knowledge_${message.id}`,
      originalMessage: message,
      category,
      summary: message.text.substring(0, 100) + (message.text.length > 100 ? '...' : ''),
      keyPoints: [message.text.substring(0, 50) + '...'],
      actionItems,
      relevantContext: `Discussion in #${message.channelName} by ${message.username}`,
      confidence,
      extractedAt: new Date().toISOString()
    };
  }

  filterHighConfidenceKnowledge(items: ProcessedKnowledge[], minConfidence = 0.6): ProcessedKnowledge[] {
    return items.filter(item => item.confidence >= minConfidence);
  }
}

// src/knowledge-store.ts
import * as fs from 'fs/promises';
import * as path from 'path';
import { ProcessedKnowledge, KnowledgeStats, ExtractedMessage } from './types';

export class KnowledgeStore {
  private dataDir: string;

  constructor(dataDir = './data') {
    this.dataDir = dataDir;
    this.ensureDataDir();
  }

  private async ensureDataDir(): Promise<void> {
    try {
      await fs.mkdir(this.dataDir, { recursive: true });
    } catch (error) {
      console.error('Error creating data directory:', error);
    }
  }

  async saveKnowledge(knowledge: ProcessedKnowledge[]): Promise<void> {
    const filePath = path.join(this.dataDir, 'knowledge.json');
    
    try {
      // Load existing knowledge
      let existingKnowledge: ProcessedKnowledge[] = [];
      try {
        const existingData = await fs.readFile(filePath, 'utf-8');
        existingKnowledge = JSON.parse(existingData);
      } catch {
        // File doesn't exist yet, start fresh
      }

      // Merge and deduplicate
      const allKnowledge = [...existingKnowledge];
      const existingIds = new Set(existingKnowledge.map(k => k.id));

      knowledge.forEach(item => {
        if (!existingIds.has(item.id)) {
          allKnowledge.push(item);
        }
      });

      await fs.writeFile(filePath, JSON.stringify(allKnowledge, null, 2));
      console.log(`Saved ${allKnowledge.length} knowledge items`);
    } catch (error) {
      console.error('Error saving knowledge:', error);
    }
  }

  async loadKnowledge(): Promise<ProcessedKnowledge[]> {
    const filePath = path.join(this.dataDir, 'knowledge.json');
    
    try {
      const data = await fs.readFile(filePath, 'utf-8');
      return JSON.parse(data);
    } catch {
      return [];
    }
  }

  async searchKnowledge(query: string, category?: string): Promise<ProcessedKnowledge[]> {
    const knowledge = await this.loadKnowledge();
    const searchTerm = query.toLowerCase();

    return knowledge.filter(item => {
      const matchesQuery = 
        item.summary.toLowerCase().includes(searchTerm) ||
        item.keyPoints.some(point => point.toLowerCase().includes(searchTerm)) ||
        item.originalMessage.text.toLowerCase().includes(searchTerm);

      const matchesCategory = !category || item.category === category;

      return matchesQuery && matchesCategory;
    });
  }

  async getStats(): Promise<KnowledgeStats> {
    const knowledge = await this.loadKnowledge();
    
    const categoryCounts: Record<string, number> = {};
    const contributorCounts: Record<string, number> = {};
    const channelCounts: Record<string, number> = {};

    knowledge.forEach(item => {
      // Category counts
      categoryCounts[item.category] = (categoryCounts[item.category] || 0) + 1;
      
      // Contributor counts
      const user = item.originalMessage.username || item.originalMessage.user;
      contributorCounts[user] = (contributorCounts[user] || 0) + 1;
      
      // Channel counts
      const channel = item.originalMessage.channelName || item.originalMessage.channel;
      channelCounts[channel] = (channelCounts[channel] || 0) + 1;
    });

    const topContributors = Object.entries(contributorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .map(([user, count]) => ({ user, count }));

    return {
      totalMessages: knowledge.length,
      totalKnowledgeItems: knowledge.length,
      categoryCounts,
      topContributors,
      channelStats: channelCounts
    };
  }
}

// src/server.ts
import express from 'express';
import cors from 'cors';
import * as path from 'path';
import { SlackExtractor } from './slack-client';
import { KnowledgeProcessor } from './knowledge-processor';
import { KnowledgeStore } from './knowledge-store';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../public')));

const slackExtractor = new SlackExtractor(process.env.SLACK_BOT_TOKEN!);
const knowledgeProcessor = new KnowledgeProcessor(process.env.CLAUDE_API_KEY!);
const knowledgeStore = new KnowledgeStore();

// API Routes
app.get('/api/channels', async (req, res) => {
  try {
    const channels = await slackExtractor.getChannels();
    res.json(channels);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch channels' });
  }
});

app.post('/api/extract', async (req, res) => {
  const { channelIds, daysBack = 30 } = req.body;
  
  try {
    console.log('Starting extraction...');
    const channels = await slackExtractor.getChannels();
    const userMap = await slackExtractor.getUsers();
    
    const selectedChannels = channels.filter(c => channelIds.includes(c.id));
    const allKnowledge = [];
    
    for (const channel of selectedChannels) {
      console.log(`Processing #${channel.name}...`);
      
      const messages = await slackExtractor.extractMessages(
        channel.id, 
        channel.name, 
        daysBack, 
        userMap
      );
      
      console.log(`Processing ${messages.length} messages for knowledge...`);
      
      for (const message of messages) {
        const knowledge = await knowledgeProcessor.processMessage(message);
        if (knowledge) {
          allKnowledge.push(knowledge);
        }
      }
    }
    
    // Filter high-confidence knowledge
    const highConfidenceKnowledge = knowledgeProcessor.filterHighConfidenceKnowledge(allKnowledge);
    
    await knowledgeStore.saveKnowledge(highConfidenceKnowledge);
    
    res.json({
      success: true,
      totalMessages: allKnowledge.length,
      knowledgeItems: highConfidenceKnowledge.length,
      channels: selectedChannels.map(c => c.name)
    });
    
  } catch (error) {
    console.error('Extraction error:', error);
    res.status(500).json({ error: 'Extraction failed' });
  }
});

app.get('/api/search', async (req, res) => {
  const { q: query, category } = req.query;
  
  try {
    const results = await knowledgeStore.searchKnowledge(
      query as string, 
      category as string
    );
    res.json(results);
  } catch (error) {
    res.status(500).json({ error: 'Search failed' });
  }
});

app.get('/api/stats', async (req, res) => {
  try {
    const stats = await knowledgeStore.getStats();
    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: 'Failed to get stats' });
  }
});

app.get('/api/knowledge', async (req, res) => {
  try {
    const knowledge = await knowledgeStore.loadKnowledge();
    res.json(knowledge);
  } catch (error) {
    res.status(500).json({ error: 'Failed to load knowledge' });
  }
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

// public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slack Knowledge Extractor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #f8f9fa;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            text-align: center;
        }
        
        .header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .header p {
            color: #7f8c8d;
            font-size: 1.1em;
        }
        
        .section {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 25px;
        }
        
        .section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }
        
        input, select, button {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #3498db;
        }
        
        button {
            background: #3498db;
            color: white;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: background 0.3s;
        }
        
        button:hover {
            background: #2980b9;
        }
        
        button:disabled {
            background: #95a5a6;
            cursor: not-allowed;
        }
        
        .channels-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .channel-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            transition: border-color 0.3s;
        }
        
        .channel-item:hover {
            border-color: #3498db;
        }
        
        .channel-item input[type="checkbox"] {
            width: auto;
            margin-right: 10px;
        }
        
        .results {
            margin-top: 30px;
        }
        
        .knowledge-item {
            border: 1px solid #e1e8ed;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            background: #fafbfc;
        }
        
        .knowledge-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .category-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .category-decisions { background: #e8f5e8; color: #2e7d32; }
        .category-discussions { background: #fff3e0; color: #f57c00; }
        .category-resources { background: #e3f2fd; color: #1976d2; }
        .category-processes { background: #f3e5f5; color: #7b1fa2; }
        .category-announcements { background: #ffebee; color: #c62828; }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        
        .stat-card {
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: bold;
            color: #3498db;
        }
        
        .stat-label {
            color: #666;
            margin-top: 5px;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .error {
            background: #ffebee;
            color: #c62828;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }
        
        .success {
            background: #e8f5e8;
            color: #2e7d32;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🧠 Slack Knowledge Extractor</h1>
            <p>Transform your Slack conversations into searchable organizational knowledge</p>
        </div>

        <div class="section">
            <h2>📊 Dashboard</h2>
            <div id="stats" class="stats-grid">
                <div class="loading">Loading stats...</div>
            </div>
        </div>

        <div class="section">
            <h2>🔄 Extract Knowledge</h2>
            <div class="form-group">
                <label>Select Channels to Process:</label>
                <div id="channels" class="channels-grid">
                    <div class="loading">Loading channels...</div>
                </div>
            </div>
            
            <div class="form-group">
                <label for="daysBack">Days of History:</label>
                <select id="daysBack">
                    <option value="7">Last 7 days</option>
                    <option value="30" selected>Last 30 days</option>
                    <option value="90">Last 90 days</option>
                </select>
            </div>
            
            <button id="extractBtn" onclick="extractKnowledge()">Extract Knowledge</button>
            
            <div id="extractResult"></div>
        </div>

        <div class="section">
            <h2>🔍 Search Knowledge</h2>
            <div class="form-group">
                <label for="searchQuery">Search Query:</label>
                <input type="text" id="searchQuery" placeholder="Enter search terms..." onkeyup="handleSearchKeyup(event)">
            </div>
            
            <div class="form-group">
                <label for="categoryFilter">Filter by Category:</label>
                <select id="categoryFilter" onchange="performSearch()">
                    <option value="">All Categories</option>
                    <option value="decisions">Decisions</option>
                    <option value="discussions">Discussions</option>
                    <option value="resources">Resources</option>
                    <option value="processes">Processes</option>
                    <option value="announcements">Announcements</option>
                </select>
            </div>
            
            <button onclick="performSearch()">Search</button>
            
            <div id="searchResults" class="results"></div>
        </div>
    </div>

    <script>
        let channels = [];
        let stats = {};

        // Load initial data
        loadChannels();
        loadStats();

        async function loadChannels() {
            try {
                const response = await fetch('/api/channels');
                channels = await response.json();
                
                const channelsDiv = document.getElementById('channels');
                channelsDiv.innerHTML = channels.map(channel => `
                    <div class="channel-item">
                        <input type="checkbox" id="channel_${channel.id}" value="${channel.id}">
                        <label for="channel_${channel.id}">#${channel.name}</label>
                    </div>
                `).join('');
            } catch (error) {
                document.getElementById('channels').innerHTML = '<div class="error">Failed to load channels</div>';
            }
        }

        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                stats = await response.json();
                
                const statsDiv = document.getElementById('stats');
                statsDiv.innerHTML = `
                    <div class="stat-card">
                        <div class="stat-number">${stats.totalKnowledgeItems}</div>
                        <div class="stat-label">Knowledge Items</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${Object.keys(stats.categoryCounts).length}</div>
                        <div class="stat-label">Categories</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.topContributors.length}</div>
                        <div class="stat-label">Contributors</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${Object.keys(stats.channelStats).length}</div>
                        <div class="stat-label">Channels</div>
                    </div>
                `;
            } catch (error) {
                document.getElementById('stats').innerHTML = '<div class="error">Failed to load stats</div>';
            }
        }

        async function extractKnowledge() {
            const selectedChannels = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
                .map(cb => cb.value);
            
            if (selectedChannels.length === 0) {
                alert('Please select at least one channel');
                return;
            }

            const daysBack = parseInt(document.getElementById('daysBack').value);
            const extractBtn = document.getElementById('extractBtn');
            const resultDiv = document.getElementById('extractResult');

            extractBtn.disabled = true;
            extractBtn.textContent = 'Extracting...';
            resultDiv.innerHTML = '<div class="loading">Processing messages...</div>';

            try {
                const response = await fetch('/api/extract', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ channelIds: selectedChannels, daysBack })
                });

                const result = await response.json();
                
                if (result.success) {
                    resultDiv.innerHTML = `
                        <div class="success">
                            Successfully processed ${result.totalMessages} messages and extracted ${result.knowledgeItems} knowledge items from channels: ${result.channels.join(', ')}
                        </div>
                    `;
                    loadStats(); // Refresh stats
                } else {
                    resultDiv.innerHTML = `<div class="error">Extraction failed</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            } finally {
                extractBtn.disabled = false;
                extractBtn.textContent = 'Extract Knowledge';
            }
        }

        function handleSearchKeyup(event) {
            if (event.key === 'Enter') {
                performSearch();
            }
        }

        async function performSearch() {
            const query = document.getElementById('searchQuery').value;
            const category = document.getElementById('categoryFilter').value;
            const resultsDiv = document.getElementById('searchResults');

            if (!query.trim()) {
                resultsDiv.innerHTML = '';
                return;
            }

            resultsDiv.innerHTML = '<div class="loading">Searching...</div>';

            try {
                const params = new URLSearchParams({ q: query });
                if (category) params.append('category', category);

                const response = await fetch(`/api/search?${params}`);
                const results = await response.json();

                if (results.length === 0) {
                    resultsDiv.innerHTML = '<div class="error">No knowledge items found matching your search</div>';
                    return;
                }

                resultsDiv.innerHTML = results.map(item => `
                    <div class="knowledge-item">
                        <div class="knowledge-header">
                            <span class="category-badge category-${item.category}">${item.category}</span>
                            <small>Confidence: ${Math.round(item.confidence * 100)}%</small>
                        </div>
                        <h4>${item.summary}</h4>
                        <p><strong>Channel:</strong> #${item.originalMessage.channelName} | <strong>Author:</strong> ${item.originalMessage.username} | <strong>Date:</strong> ${new Date(item.originalMessage.timestamp).toLocaleDateString()}</p>
                        ${item.keyPoints.length > 0 ? `
                            <div><strong>Key Points:</strong></div>
                            <ul>${item.keyPoints.map(point => `<li>${point}</li>`).join('')}</ul>
                        ` : ''}
                        ${item.actionItems.length > 0 ? `
                            <div><strong>Action Items:</strong></div>
                            <ul>${item.actionItems.map(action => `<li>${action}</li>`).join('')}</ul>
                        ` : ''}
                        <details>
                            <summary>Original Message</summary>
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;">
                                ${item.originalMessage.text}
                            </div>
                        </details>
                    </div>
                `).join('');

            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">Search failed: ${error.message}</div>`;
            }
        }

        // Load recent knowledge on page load
        window.addEventListener('load', async () => {
            try {
                const response = await fetch('/api/knowledge');
                const knowledge = await response.json();
                
                if (knowledge.length > 0) {
                    document.getElementById('searchResults').innerHTML = `
                        <h3>Recent Knowledge (${knowledge.slice(0, 10).length} of ${knowledge.length} items)</h3>
                        ${knowledge.slice(0, 10).map(item => `
                            <div class="knowledge-item">
                                <div class="knowledge-header">
                                    <span class="category-badge category-${item.category}">${item.category}</span>
                                    <small>Confidence: ${Math.round(item.confidence * 100)}%</small>
                                </div>
                                <h4>${item.summary}</h4>
                                <p><strong>Channel:</strong> #${item.originalMessage.channelName} | <strong>Author:</strong> ${item.originalMessage.username} | <strong>Date:</strong> ${new Date(item.originalMessage.timestamp).toLocaleDateString()}</p>
                                ${item.keyPoints.length > 0 ? `
                                    <div><strong>Key Points:</strong></div>
                                    <ul>${item.keyPoints.map(point => `<li>${point}</li>`).join('')}</ul>
                                ` : ''}
                                <details>
                                    <summary>Original Message</summary>
                                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;">
                                        ${item.originalMessage.text}
                                    </div>
                                </details>
                            </div>
                        `).join('')}
                    `;
                }
            } catch (error) {
                console.error('Failed to load recent knowledge:', error);
            }
        });
    </script>
</body>
</html>

// README.md
# Slack Knowledge Extractor MVP

Transform your Slack conversations into searchable organizational knowledge in 4 hours.

## Quick Start

1. **Clone and Setup**
```bash
git clone <repo>
cd slack-knowledge-extractor
npm install
```

2. **Create Slack App**
- Go to https://api.slack.com/apps
- Create new app "Knowledge Extractor"
- Add OAuth Scopes:
  - `channels:history`
  - `groups:history` 
  - `users:read`
- Install to workspace and copy Bot User OAuth Token

3. **Environment Setup**
```bash
cp .env.example .env
# Edit .env with your tokens:
# SLACK_BOT_TOKEN=xoxb-your-token
# CLAUDE_API_KEY=your-claude-key (optional for MVP)
```

4. **Run**
```bash
npm run dev
# Open http://localhost:3000
```

## Features

### ✅ Core MVP Features
- **Channel Discovery**: Automatically list all accessible Slack channels
- **Message Extraction**: Pull messages from selected channels (respects permissions)
- **Smart Processing**: Categorize messages into decisions, discussions, resources, processes, announcements
- **Search Interface**: Full-text search across extracted knowledge
- **Analytics Dashboard**: See extraction stats and top contributors

### 🔄 Knowledge Categories
- **Decisions**: Final decisions made in discussions
- **Discussions**: Ongoing debates and considerations
- **Resources**: Shared links, documents, and tools
- **Processes**: How-to information and workflows
- **Announcements**: Important company updates

### 📊 Dashboard Metrics
- Total knowledge items extracted
- Category breakdowns
- Top knowledge contributors
- Channel activity stats

## Architecture

```
src/
├── server.ts           # Express server + API routes
├── slack-client.ts     # Slack API integration
├── knowledge-processor.ts # AI processing logic
├── knowledge-store.ts  # File-based storage
├── types.ts           # TypeScript definitions
└── public/
    └── index.html     # Frontend interface
```

## API Endpoints

- `GET /api/channels` - List available channels
- `POST /api/extract` - Extract knowledge from channels
- `GET /api/search?q=query&category=type` - Search knowledge
- `GET /api/stats` - Get extraction statistics
- `GET /api/knowledge` - Get all knowledge items

## Customization

### Adding AI Processing
Replace the simple rule-based processing in `knowledge-processor.ts` with actual Claude API calls:

```typescript
async processMessage(message: ExtractedMessage): Promise<ProcessedKnowledge | null> {
  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': this.claudeApiKey,
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: 'claude-3-sonnet-20240229',
      max_tokens: 1000,
      messages: [{ role: 'user', content: prompt }]
    })
  });
  
  const result = await response.json();
  return JSON.parse(result.content[0].text);
}
```

### Database Upgrade
Replace file-based storage with PostgreSQL/MongoDB:

```typescript
// knowledge-store.ts - add database connection
constructor(private db: DatabaseConnection) {}

async saveKnowledge(knowledge: ProcessedKnowledge[]): Promise<void> {
  await this.db.collection('knowledge').insertMany(knowledge);
}
```

### Real-time Processing
Add webhook endpoint for live message processing:

```typescript
app.post('/slack/events', (req, res) => {
  const event = req.body.event;
  if (event.type === 'message') {
    // Process new message immediately
    processMessageAsync(event);
  }
  res.json({ ok: true });
});
```

## Production Deployment

### Security
- Add rate limiting
- Implement proper authentication
- Use environment-specific configs
- Add request validation

### Scaling
- Replace file storage with database
- Add Redis for caching
- Implement job queues for processing
- Add horizontal scaling support

### Monitoring
- Add logging (Winston/Pino)
- Health check endpoints
- Error tracking (Sentry)
- Performance monitoring

## Business Value

### Immediate ROI
- **Reduce onboarding time**: New employees find context faster
- **Prevent knowledge loss**: Capture decisions before people leave
- **Improve efficiency**: Stop re-asking answered questions

### Growth Potential
- **Enterprise sales**: Clear value prop for large teams
- **Platform expansion**: Support Teams, Discord, etc.
- **AI enhancement**: Better categorization and insights
- **Integration ecosystem**: Connect to wikis, docs, CRM

## Next Steps

1. **User Testing**: Deploy to 3-5 team channels, gather feedback
2. **AI Integration**: Replace rule-based processing with Claude API
3. **Database Migration**: Move from files to proper database
4. **Real-time Processing**: Add webhook for live knowledge extraction
5. **Enterprise Features**: SSO, advanced permissions, audit logs

## Troubleshooting

### Common Issues
- **"Channel not found"**: Ensure bot is added to private channels
- **"Rate limited"**: Increase delays in slack-client.ts
- **"No knowledge extracted"**: Check message filtering logic
- **"Search not working"**: Verify knowledge was saved to data/knowledge.json

### Performance Tips
- Start with smaller channel sets
- Adjust confidence thresholds
- Use date filters for large channels
- Monitor API rate limits

---

**Built in 4 hours. Ready to scale.**